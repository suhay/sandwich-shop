// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package sandwich_shop

import (
	"fmt"
	"io"
	"strconv"
)

type Order struct {
	Name    string   `json:"name"`
	Runtime *Runtime `json:"runtime"`
	Path    *string  `json:"path"`
}

type Shop struct {
	ID       string     `json:"id"`
	Host     string     `json:"host"`
	Runtimes []*Runtime `json:"runtimes"`
}

type Runtime string

const (
	RuntimeNode9_10 Runtime = "node9_10"
	RuntimeNode10_6 Runtime = "node10_6"
	RuntimeNode12_7 Runtime = "node12_7"
	RuntimeGo1_13   Runtime = "go1_13"
)

var AllRuntime = []Runtime{
	RuntimeNode9_10,
	RuntimeNode10_6,
	RuntimeNode12_7,
	RuntimeGo1_13,
}

func (e Runtime) IsValid() bool {
	switch e {
	case RuntimeNode9_10, RuntimeNode10_6, RuntimeNode12_7, RuntimeGo1_13:
		return true
	}
	return false
}

func (e Runtime) String() string {
	return string(e)
}

func (e *Runtime) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Runtime(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Runtime", str)
	}
	return nil
}

func (e Runtime) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
