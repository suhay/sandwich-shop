// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Order struct {
	Name       string    `json:"name"`
	Runtime    *Runtime  `json:"runtime"`
	Path       *string   `json:"path"`
	Env        []*string `json:"env"`
	Auth       *string   `json:"auth"`
	AuthHeader *string   `json:"auth_header"`
}

type Sandwich struct {
	Name     string     `json:"name"`
	Host     string     `json:"host"`
	Runtimes []*Runtime `json:"runtimes"`
	Port     *int       `json:"port"`
}

type Runtime string

const (
	RuntimeNode14  Runtime = "node14"
	RuntimeNode15  Runtime = "node15"
	RuntimeNode16  Runtime = "node16"
	RuntimeGo1_15  Runtime = "go1_15"
	RuntimeGo1_16  Runtime = "go1_16"
	RuntimeGo1_17  Runtime = "go1_17"
	RuntimePython2 Runtime = "python2"
	RuntimePython3 Runtime = "python3"
	RuntimeBinary  Runtime = "binary"
)

var AllRuntime = []Runtime{
	RuntimeNode14,
	RuntimeNode15,
	RuntimeNode16,
	RuntimeGo1_15,
	RuntimeGo1_16,
	RuntimeGo1_17,
	RuntimePython2,
	RuntimePython3,
	RuntimeBinary,
}

func (e Runtime) IsValid() bool {
	switch e {
	case RuntimeNode14, RuntimeNode15, RuntimeNode16, RuntimeGo1_15, RuntimeGo1_16, RuntimeGo1_17, RuntimePython2, RuntimePython3, RuntimeBinary:
		return true
	}
	return false
}

func (e Runtime) String() string {
	return string(e)
}

func (e *Runtime) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Runtime(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Runtime", str)
	}
	return nil
}

func (e Runtime) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
